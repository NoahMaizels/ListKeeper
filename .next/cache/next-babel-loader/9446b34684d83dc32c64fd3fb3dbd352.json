{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport EditableTitle from './EditableTitle';\nexport default class List extends React.Component({\n  initialTitle,\n  id,\n  deleteList,\n  switchLists\n}) {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"drag\", event => {\n      event.dataTransfer.setData('text', event.target.id);\n    });\n\n    _defineProperty(this, \"onDragOver\", event => {\n      event.preventDefault();\n    });\n\n    _defineProperty(this, \"onDrop\", event => {\n      event.preventDefault();\n      const sourceNodeId = event.dataTransfer.getData('text');\n      const targetNodeId = event.target.closest('.list').id;\n      switchLists(sourceNodeId, targetNodeId);\n    });\n\n    this.state = {\n      editorId: 'x'.concat(String(Date.now())),\n      content: null,\n      editor: null\n    };\n  }\n\n  componentDidMount() {\n    const quill = new Quill(`#${editorId}`, {\n      theme: 'snow'\n    });\n    quill.on('text-change', () => {\n      this.setState({\n        contents: quill.getContents()\n      });\n      console.log(this.state.content);\n    });\n  }\n\n  render() {}\n\n}","map":{"version":3,"sources":["/Users/noahmaizels/Desktop/trellolike/components/List.js"],"names":["useState","useEffect","EditableTitle","List","React","Component","initialTitle","id","deleteList","switchLists","constructor","props","event","dataTransfer","setData","target","preventDefault","sourceNodeId","getData","targetNodeId","closest","state","editorId","concat","String","Date","now","content","editor","componentDidMount","quill","Quill","theme","on","setState","contents","getContents","console","log","render"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAIA,eAAe,MAAMC,IAAN,SAAmBC,KAAK,CAACC,SAAN,CAAgB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,EAAhB;AAAoBC,EAAAA,UAApB;AAAgCC,EAAAA;AAAhC,CAAhB,CAAnB,CAAkF;AAE/FC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;;AADgB,kCAsBVC,KAAD,IAAW;AAChBA,MAAAA,KAAK,CAACC,YAAN,CAAmBC,OAAnB,CAA2B,MAA3B,EAAmCF,KAAK,CAACG,MAAN,CAAaR,EAAhD;AACD,KAxBiB;;AAAA,wCA0BJK,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACI,cAAN;AACD,KA5BiB;;AAAA,oCA8BRJ,KAAD,IAAW;AAClBA,MAAAA,KAAK,CAACI,cAAN;AACA,YAAMC,YAAY,GAAGL,KAAK,CAACC,YAAN,CAAmBK,OAAnB,CAA2B,MAA3B,CAArB;AACA,YAAMC,YAAY,GAAGP,KAAK,CAACG,MAAN,CAAaK,OAAb,CAAqB,OAArB,EAA8Bb,EAAnD;AACAE,MAAAA,WAAW,CAACQ,YAAD,EAAeE,YAAf,CAAX;AACD,KAnCiB;;AAEhB,SAAKE,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,IAAIC,MAAJ,CAAWC,MAAM,CAACC,IAAI,CAACC,GAAL,EAAD,CAAjB,CADC;AAEXC,MAAAA,OAAO,EAAE,IAFE;AAGXC,MAAAA,MAAM,EAAE;AAHG,KAAb;AAKD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,UAAOC,KAAK,GAAG,IAAIC,KAAJ,CAAW,IAAGT,QAAS,EAAvB,EAA0B;AACvCU,MAAAA,KAAK,EAAE;AADgC,KAA1B,CAAf;AAIAF,IAAAA,KAAK,CAACG,EAAN,CAAS,aAAT,EAAwB,MAAM;AAC5B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAEL,KAAK,CAACM,WAAN;AAAZ,OAAd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,KAAL,CAAWM,OAAvB;AACD,KAHD;AAID;;AAkBDY,EAAAA,MAAM,GAAE,CAEP;;AAxC8F","sourcesContent":["import { useState, useEffect } from 'react'\nimport EditableTitle from './EditableTitle'\n\n\n\nexport default class List extends React.Component({ initialTitle, id, deleteList, switchLists }) {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      editorId: 'x'.concat(String(Date.now())),\n      content: null,\n      editor: null,\n    }\n  }\n\n  componentDidMount(){\n    const  quill = new Quill(`#${editorId}`, {\n      theme: 'snow'\n    })\n\n    quill.on('text-change', () => {\n      this.setState({ contents: quill.getContents()})\n      console.log(this.state.content)\n    });\n  }\n\n\n\n  drag = (event) => {\n    event.dataTransfer.setData('text', event.target.id)\n  }\n   \n  onDragOver = (event) => {\n    event.preventDefault();\n  }\n\n  onDrop = (event) => {\n    event.preventDefault();\n    const sourceNodeId = event.dataTransfer.getData('text')\n    const targetNodeId = event.target.closest('.list').id\n    switchLists(sourceNodeId, targetNodeId)\n  }\n  render(){\n\n  }\n \n}"]},"metadata":{},"sourceType":"module"}